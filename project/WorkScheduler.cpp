#include <iostream>
#include <pqxx/pqxx>
#include <thread>
#include <chrono>

#include "WorkScheduler.h"
#include "utils.h"

void WorkScheduler::schedule()
{
    remind = true;
    std::thread t([&](){
        while(remind) {
            reminder_loop();
            std::this_thread::sleep_for(std::chrono::minutes(1));
        }
    });

    t.detach();

    while (true)
    {
        std::cout << "\n=== –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===" << std::endl;
        std::cout << "1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" << std::endl;
        std::cout << "2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É" << std::endl;
        std::cout << "3. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" << std::endl;
        std::cout << "4. –í—ã—Ö–æ–¥\n> ";

        int choice;
        std::cin >> choice;

        if (std::cin.fail())
        {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n";
            continue;
        }

        if (choice == 1)
        {
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            std::time_t now = std::time(nullptr);
            std::tm *now_tm = std::localtime(&now);
            char buf[11];
            std::strftime(buf, sizeof(buf), "%Y-%m-%d", now_tm);
            std::string today(buf);

            print_tasks_for_date(today);
        }
        else if (choice == 2)
        {
            std::string date;
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): ";
            std::cin >> date;

            if (!is_valid_date(date))
            {
                std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.\n";
                continue;
            }

            print_tasks_for_date(date);
        }
        else if (choice == 3)
        {
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // –æ—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞

            std::string name, description, time_start, time_end;

            std::cout << "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ";
            std::getline(std::cin, name);

            std::cout << "–û–ø–∏—Å–∞–Ω–∏–µ: ";
            std::getline(std::cin, description);

            std::cout << "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD HH:MM): ";
            std::getline(std::cin, time_start);

            if (!is_valid_datetime(time_start))
            {
                std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.\n";
                continue;
            }

            std::cout << "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD HH:MM): ";
            std::getline(std::cin, time_end);

            if (!is_valid_datetime(time_end))
            {
                std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è.\n";
                continue;
            }

            if (add_task(name, description, time_start, time_end))
            {
                std::cout << "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n";
            }
        }
        else if (choice == 4)
        {
            std::cout << "–í—ã—Ö–æ–¥ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n";
            break;
        }
        else
        {
            std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n";
        }
    }
}


std::vector<Task> WorkScheduler::get_tasks(const std::string &date_str)
{
    std::vector<Task> tasks;

    try
    {
        pqxx::work txn(*conn_);

        pqxx::result result = txn.exec(
            pqxx::zview{
                "SELECT task_name, time_start, time_end, description "
                "FROM actions "
                "WHERE user_id = $1 AND time_start::date = $2 "
                "ORDER BY time_start"
            },
            pqxx::params{user_id, date_str}
        );

        for (const auto &row : result)
        {
            tasks.push_back(Task{
                row["task_name"].c_str(),
                row["time_start"].c_str(),
                row["time_end"].c_str(),
                row["description"].is_null() ? "" : row["description"].c_str()
            });
        }

        txn.commit();
    }
    catch (const std::exception &e)
    {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É " << date_str << ": " << e.what() << std::endl;
    }

    return tasks;
}


bool WorkScheduler::add_task(const std::string &name,
                             const std::string &description,
                             const std::string &time_start,
                             const std::string &time_end)
{
    try
    {
        pqxx::work txn(*conn_);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        pqxx::result overlap_check = txn.exec(
            pqxx::zview{
                "SELECT task_name FROM actions "
                "WHERE user_id = $1 "
                "AND (time_start < $3 AND time_end > $2)"},
            pqxx::params{user_id, time_start, time_end});

        if (!overlap_check.empty())
        {
            std::cout << overlap_check.empty() << std::endl;
            std::string existing_task = overlap_check[0]["task_name"].c_str();
            std::cout << "–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π ‚Äî \""
                      << existing_task << "\"\n";
            return false;
        }

        txn.exec(
            pqxx::zview{
                "INSERT INTO actions (user_id, task_name, description, time_start, time_end) "
                "VALUES ($1, $2, $3, $4, $5)"},
            pqxx::params{user_id, name, description, time_start, time_end});

        txn.commit();

        return true;
    }
    catch (const std::exception &e)
    {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " << e.what() << std::endl;
        return false;
    }
}

void WorkScheduler::print_tasks_for_date(const std::string &date)
{
    std::vector<Task> tasks = get_tasks(date);

    if (tasks.empty())
    {
        std::cout << "–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.\n";
    }
    else
    {
        std::cout << std::left
                  << std::setw(20) << "–ó–∞–¥–∞—á–∞"
                  << std::setw(25) << "–ù–∞—á–∞–ª–æ"
                  << std::setw(25) << "–ö–æ–Ω–µ—Ü"
                  << "–û–ø–∏—Å–∞–Ω–∏–µ\n";
        std::cout << std::string(90, '-') << "\n";

        for (const auto &task : tasks)
        {
            std::cout << std::left
                      << std::setw(20) << task.name
                      << std::setw(25) << task.time_start
                      << std::setw(25) << task.time_end
                      << task.description << "\n";
        }
    }
}

void WorkScheduler::reminder_loop() {
    while (true) {
        try {
            pqxx::work txn(*conn_);

            auto now = std::chrono::system_clock::now();
            auto in_61_min = now + std::chrono::minutes(61);  // –∑–∞–ø–∞—Å –Ω–∞ 1 —á–∞—Å –≤–ø–µ—Ä—ë–¥

            std::time_t now_time = std::chrono::system_clock::to_time_t(now);
            std::time_t in_61_time = std::chrono::system_clock::to_time_t(in_61_min);

            char now_buf[20], in_61_buf[20];
            std::strftime(now_buf, sizeof(now_buf), "%F %T", std::localtime(&now_time));
            std::strftime(in_61_buf, sizeof(in_61_buf), "%F %T", std::localtime(&in_61_time));

            pqxx::result result = txn.exec(
                pqxx::zview{
                    "SELECT task_name, time_start FROM actions "
                    "WHERE user_id = $1 AND time_start >= $2 AND time_start <= $3 "
                    "ORDER BY time_start"
                },
                pqxx::params{user_id, now_buf, in_61_buf}
            );

            for (const auto &row : result) {
                std::string name = row["task_name"].c_str();
                std::string start_str = row["time_start"].c_str();

                // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
                auto start_time = parse_datetime(start_str);
                auto diff = std::chrono::duration_cast<std::chrono::minutes>(start_time - now).count();

                if (diff == 60 || diff == 30 || diff == 5) {
                    std::string message = "–ó–∞–¥–∞—á–∞ \"" + name + "\" –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ " + std::to_string(diff) + " –º–∏–Ω—É—Ç.";
                    std::string command = "notify-send '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' '" + message + "'";
                    system(command.c_str());

                    std::cout << "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " << name << " (" << start_str << ")\n";
                }
            }

            txn.commit();
        } catch (const std::exception &e) {
            std::cerr << "–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–µ: " << e.what() << std::endl;
        }

        std::this_thread::sleep_for(std::chrono::minutes(1));
    }
}

