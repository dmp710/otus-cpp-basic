#include <iostream>

#include "WorkScheduler.h"

#include <ftxui/component/component.hpp>
#include <ftxui/component/screen_interactive.hpp>
using namespace ftxui;

int WorkScheduler::draw_action_menu()
{
    std::vector<std::string> options = {
        "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        "üìÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
        "‚ùå –í—ã—Ö–æ–¥"};

    int selected = 0;
    int result = -1;

    auto screen = ScreenInteractive::TerminalOutput();

    MenuOption option;
    option.on_enter = [&]
    {
        result = selected;
        screen.ExitLoopClosure()(); // <-- –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –ø–æ Enter
    };

    auto menu = Menu(&options, &selected, option);

    auto renderer = Renderer(menu, [&]
                             { return vbox({
                                          text("–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è") | bold | center,
                                          separator(),
                                          menu->Render() | frame | border,
                                      }) |
                                      center | vcenter; });

    screen.Loop(renderer);

    return result + 1; // 
}

int WorkScheduler::draw_enter_menu()
{
    std::vector<std::string> options = {
        "üîê Login", 
        "üìù Register", 
        "‚ùå Exit"
    };
    int selected = 0;

    auto menu = Menu(&options, &selected);

    auto renderer = Renderer(menu, [&] {
        return vbox({
            text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkScheduler!") 
                | center 
                | bold 
                | color(Color::Green),

            separator(),

            text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üë ‚Üì –∏ Enter –¥–ª—è –≤—ã–±–æ—Ä–∞") 
                | center 
                | dim,

            menu->Render() 
                | frame 
                | borderRounded 
                | size(WIDTH, GREATER_THAN, 30) // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 40
                | center,

        }) | center | vcenter;
    });

    auto screen = ScreenInteractive::TerminalOutput();

    Component component = CatchEvent(renderer, [&](Event event) {
        if (event == Event::Return) {
            screen.ExitLoopClosure()();
            return true;
        }
        return false;
    });

    screen.Loop(component);

    return selected;
}